// See LICENSE for license details.
// Use handlebars for template generation
//
//Start with a static tb and try to genererate a gnerator for it
// This uses clkdiv_n_2_4_8 verilog. You need to compile it separately
package f2_lane_switch

import chisel3._
import java.io.{File, FileWriter, BufferedWriter}
import com.gilt.handlebars.scala.binding.dynamic._
import com.gilt.handlebars.scala.Handlebars

//Testbench.
// OBS: UNDER CONSTRUCTION
object tb_f2_lane_switch {
    // This is insane
    // This must be done by a method processing direction-name-width tuples
    def main(args: Array[String]): Unit = {
         val name= this.getClass.getSimpleName.split("\\$").last
         val tb = new BufferedWriter(new FileWriter("./verilog/"+name+".v"))
         object tbvars {
             val oname=name
             val dutmod = "f2_link_switch" 
             val n = 16
             val inputn = 9
             val gainbits= 10
             val decimator_modebits= 3
             val rx_output_modebits= 3
             val input_modebits= 3
             val adc_fifo_lut_modebits= 3
             val adc_lut_width= 9
             val indexbits= 2

             val paramseq=Seq(("g_infile","\"./A.txt\""), 
                           ("g_outfile","\"./Z.txt\""),
                           ("g_Rs_high","16*8*20.0e6"),
                           ("g_Rs_low","20.0e6"),
                           ("g_scale0","1"),
                           ("g_scale1","1"),
                           ("g_scale2","1"),
                           ("g_scale3","1"),
                           ("g_user_index","0"),
                           ("g_antenna_index","0"),
                           ("g_rx_output_mode","0"),
                           ("g_input_mode","0"),
                           ("g_mode","4"),
                           ("g_adc_fifo_lut_mode","2"))

            //(type,name,upperlimit,lowerlimit, assign,init)    
            //("None","None","None","None","None","None")
            val ioseq=Seq(("wire","clkpn","None","None","None","None"),
                          ("wire","clkp2n","None","None","None","None"),
                          ("wire","clkp4n","None","None","None","None"),
                          ("wire","clkp8n","None","None","None","None"),
                          ("reg","Ndiv",7,0,"None","c_ratio0"),
                          ("reg","reset_clk","None","None","None",1),
                          ("clock","clock","None","None","None","None"),
                          ("reset","reset","None","None","None",1),
                          ("in","iptr_A_0_real",inputn-1,0,"None","None"),
                          ("in","iptr_A_0_imag",inputn-1,0,"None","None"),
                          ("in","iptr_A_1_real",inputn-1,0,"None","None"),
                          ("in","iptr_A_1_imag",inputn-1,0,"None","None"),
                          ("in","iptr_A_2_real",inputn-1,0,"None","None"),
                          ("in","iptr_A_2_imag",inputn-1,0,"None","None"),
                          ("in","iptr_A_3_real",inputn-1,0,"None","None"),
                          ("in","iptr_A_3_imag",inputn-1,0,"None","None"),
                          ("dclk","decimator_clocks_cic3clockslow","None","None","clkpn","None"),
                          ("dclk","decimator_clocks_hb1clock_low","None","None","clkp2n","None"),
                          ("dclk","decimator_clocks_hb2clock_low","None","None","clkp4n","None"),
                          ("dclk","decimator_clocks_hb3clock_low","None","None","clkp8n","None"),
                          ("in","decimator_controls_0_cic3integscale",gainbits-1,0,"None","g_scale0"),
                          ("in","decimator_controls_0_hb1scale",gainbits-1,0,"None","g_scale1"),
                          ("in","decimator_controls_0_hb2scale",gainbits-1,0,"None","g_scale2"),
                          ("in","decimator_controls_0_hb3scale",gainbits-1,0,"None","g_scale3"),
                          ("in","decimator_controls_0_mode",decimator_modebits-1,0,"None","g_mode"),
                          ("in","decimator_controls_1_cic3integscale",gainbits-1,0,"None","g_scale0"),
                          ("in","decimator_controls_1_hb1scale",gainbits-1,0,"None","g_scale1"),
                          ("in","decimator_controls_1_hb2scale",gainbits-1,0,"None","g_scale2"),
                          ("in","decimator_controls_1_hb3scale",gainbits-1,0,"None","g_scale3"),
                          ("in","decimator_controls_1_mode",decimator_modebits-1,0,"None","g_mode"),
                          ("in","decimator_controls_2_cic3integscale",gainbits-1,0,"None","g_scale1"),
                          ("in","decimator_controls_2_hb1scale",gainbits-1,0,"None","g_scale1"),
                          ("in","decimator_controls_2_hb2scale",gainbits-1,0,"None","g_scale2"),
                          ("in","decimator_controls_2_hb3scale",gainbits-1,0,"None","g_scale3"),
                          ("in","decimator_controls_2_mode",decimator_modebits-1,0,"None","g_mode"),
                          ("in","decimator_controls_3_cic3integscale",gainbits-1,0,"None","g_scale0"),
                          ("in","decimator_controls_3_hb1scale",gainbits-1,0,"None","g_scale1"),
                          ("in","decimator_controls_3_hb2scale",gainbits-1,0,"None","g_scale2"),
                          ("in","decimator_controls_3_hb3scale",gainbits-1,0,"None","g_scale3"),
                          ("in","decimator_controls_3_mode",decimator_modebits-1,0,"None","g_mode"),
                          ("dclk","adc_clocks_0","None","None","clock","None"),
                          ("dclk","adc_clocks_1","None","None","clock","None"),
                          ("dclk","adc_clocks_2","None","None","clock","None"),
                          ("dclk","adc_clocks_3","None","None","clock","None"),
                          ("dclk","clock_symrate","None","None","clkp8n","None"),
                          ("dclk","clock_symratex4","None","None","clkp2n","None"),
                          ("dclk","clock_outfifo_deq","None","None","clock_symrate","None"),
                          ("dclk","clock_infifo_enq","None","None","clock_symrate","None"),
                          ("in","user_index",indexbits-1,0,"None","g_user_index"),
                          ("in","antenna_index",indexbits-1,0,"None","g_antenna_index"),
                          ("in","reset_index_count","None","None","None",1),
                          ("in","reset_outfifo","None","None","None",1),
                          ("in","reset_adcfifo","None","None","None",1),
                          ("in","reset_infifo","None","None","None",1),
                          ("in","rx_output_mode",rx_output_modebits-1,0,"None","None"),
                          ("in","input_mode",input_modebits-1,0,"None","None"),
                          ("in","adc_fifo_lut_mode",adc_fifo_lut_modebits-1,0,"None","g_adc_fifo_lut_mode"),
                          ("in","adc_lut_write_addr",adc_lut_width-1,0,"None","None"),
                          ("in","adc_lut_write_vals_0_real",adc_lut_width-1,0,"None","None"),
                          ("in","adc_lut_write_vals_1_real",adc_lut_width-1,0,"None","None"),
                          ("in","adc_lut_write_vals_2_real",adc_lut_width-1,0,"None","None"),
                          ("in","adc_lut_write_vals_3_real",adc_lut_width-1,0,"None","None"),
                          ("in","adc_lut_write_vals_0_imag",adc_lut_width-1,0,"None","None"),
                          ("in","adc_lut_write_vals_1_imag",adc_lut_width-1,0,"None","None"),
                          ("in","adc_lut_write_vals_2_imag",adc_lut_width-1,0,"None","None"),
                          ("in","adc_lut_write_vals_3_imag",adc_lut_width-1,0,"None","None"),
                          ("in","adc_lut_write_en",0,0,"None",0),
                          ("outs","ofifo_bits_data_0_real",n-1,0,"None","None"),
                          ("outs","ofifo_bits_data_0_imag",n-1,0,"None","None"),
                          ("outs","ofifo_bits_data_1_real",n-1,0,"None","None"),
                          ("outs","ofifo_bits_data_1_imag",n-1,0,"None","None"),
                          ("outs","ofifo_bits_data_2_real",n-1,0,"None","None"),
                          ("outs","ofifo_bits_data_2_imag",n-1,0,"None","None"),
                          ("outs","ofifo_bits_data_3_real",n-1,0,"None","None"),
                          ("outs","ofifo_bits_data_3_imag",n-1,0,"None","None"),
                          ("out","ofifo_bits_index",1,0,"None","None"),
                          ("in","ofifo_ready","None","None","None",1),
                          ("out","ofifo_valid","None","None","None","None"),
                          ("out","iptr_fifo_ready","None","None","None","None"),
                          ("in","iptr_fifo_valid","None","None","None","None"),
                          ("in","iptr_fifo_bits_data_0_real",n-1,0,"None","None"),
                          ("in","iptr_fifo_bits_data_0_imag",n-1,0,"None","None"),
                          ("in","iptr_fifo_bits_data_1_real",n-1,0,"None","None"),
                          ("in","iptr_fifo_bits_data_1_imag",n-1,0,"None","None"),
                          ("in","iptr_fifo_bits_data_2_real",n-1,0,"None","None"),
                          ("in","iptr_fifo_bits_data_2_imag",n-1,0,"None","None"),
                          ("in","iptr_fifo_bits_data_3_real",n-1,0,"None","None"),
                          ("in","iptr_fifo_bits_data_3_imag",n-1,0,"None","None"),
                          ("in","iptr_fifo_bits_index",1,0,"None","None")
                          )
        }
        val header="//This is a tesbench generated with scala generator\n"
        var extpars="""//Things you want to control from the simulator cmdline must be parameters %nmodule %s #(""".format(tbvars.oname)+
                       tbvars.paramseq.map{ 
                           case (par,value) => "parameter %s = %s,\n            ".format(par,value)
                       }.mkString
        extpars=extpars.patch(extpars.lastIndexOf(','),"",1)+");"
        var dutdef="""//DUT definition%n    %s DUT (""".format(tbvars.dutmod)+
                     tbvars.ioseq.map{ 
                         case ("reg",name,ul,dl,assingn,init)  => ""
                         case ("wire",name,ul,dl,assingn,init)  => ""
                         case ("reset"|"clock",name,ul,dl,assign,init)  => ".%s(%s),\n    ".format(name,name)
                         case (dir,name,ul,dl,assign,init) => ".io_%s(io_%s),\n    ".format(name,name)
                         case _ => ""
                     }.mkString
        dutdef=dutdef.patch(dutdef.lastIndexOf(','),"",1)+");"

        val regdef="""//Registers for inputs %n""".format() +
                     tbvars.ioseq.map{ 
                         case ("clock",name,ul,dl,assign,init)  => "reg %s;\n".format(name)
                         case ("reset",name,ul,dl,assign,init) => "reg %s;\n".format(name)
                         case ("in"|"reg",name,"None","None",assign,init) => "reg io_%s;\n".format(name)
                         case ("in"|"reg",name,ul,dl,assign,init) => "reg [%s:%s] io_%s;\n".format(ul,dl,name)
                         case ("ins"|"regs",name,ul,dl,assign,init) => "reg signed [%s:%s] io_%s;\n".format(ul,dl,name)
                         case _ => ""
                     }.mkString

        val wiredef="""//Wires for outputs %n""".format() +
                     tbvars.ioseq.map{ 
                         case ("dclk"|"out"|"wire",name,"None","None",assign,init) => "wire io_%s;\n".format(name)
                         case ("out"|"wire",name,ul,dl,assign,init) => "wire [%s:%s] io_%s;\n".format(ul,dl,name)
                         case ("outs"|"wires",name,ul,dl,assign,init) => "wire signed [%s:%s] io_%s;\n".format(ul,dl,name)
                         case _ => ""
                     }.mkString

        val assdef="""//Assignments %n""".format()+
                     tbvars.ioseq.map{ 
                         case ("dclk"|"out"|"in",name,ul,dl,"None",init) => ""
                         case ("dclk"|"out"|"in",name,ul,dl,"clock",init) => "assign io_%s=clock;\n".format(name)
                         case ("dclk"|"out"|"in",name,ul,dl,"reset",init) => "assign io_%s=reset;\n".format(name)
                         case ("dclk"|"out"|"in",name,ul,dl,assign,init) => "assign io_%s=io_%s;\n".format(name,assign)
                         case _ => ""
                     }.mkString

        val initialdef="""%n%n//Initial values %ninitial #0 begin%n""".format()+
                     tbvars.ioseq.map{ 
                         case ( dir,name,ul,dl,assign,"None") => ""
                         case ("reset",name,ul,dl,assign,init) => "    %s=%s;\n".format(name,init)
                         case ("reset" | "in" | "wire" | "reg" |"wires" | "regs" ,name,ul,dl,assign,init) => "    io_%s=%s;\n".format(name,init)
                         case _ => ""
                     }.mkString
                     


        val textTemplate=header+ extpars+"""
                        |//timescale 1ps this should probably be a global model parameter 
                        |parameter integer c_Ts=1/(g_Rs_high*1e-12);
                        |parameter integer c_ratio0=g_Rs_high/(8*g_Rs_low);
                        |parameter integer c_ratio1=g_Rs_high/(4*g_Rs_low);
                        |parameter integer c_ratio2=g_Rs_high/(2*g_Rs_low);
                        |parameter integer c_ratio3=g_Rs_high/(g_Rs_low);
                        |parameter RESET_TIME = 16*c_Ts;
                        |
                        |""".stripMargin('|')+regdef+wiredef+assdef+
                        """|
                        |//File IO parameters
                        |integer StatusI, StatusO, infile, outfile;
                        |integer din1,din2,din3,din4,din5,din6,din7,din8;
                        |integer memaddrcount;
                        |integer initdone;
                        |
                        |//Initializations
                        |initial clock = 1'b0;
                        |initial reset = 1'b0;
                        |initial outfile = $fopen(g_outfile,"w"); // For writing
                        |
                        |//Clock definitions
                        |always #(c_Ts)clock = !clock ;
                        | 
                        |//Read this with Ouput fifo enquque clk
                        |always @(posedge io_clock_symrate && (initdone==1)) begin 
                        |    //Print only valid values 
                        |    if (~$isunknown(io_ofifo_bits_data_0_real) ) begin
                        |        $fwrite(outfile, "%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n", 
                        |                         io_ofifo_bits_data_0_real, io_ofifo_bits_data_0_imag, 
                        |                         io_ofifo_bits_data_1_real, io_ofifo_bits_data_1_imag, 
                        |                         io_ofifo_bits_data_2_real, io_ofifo_bits_data_2_imag, 
                        |                         io_ofifo_bits_data_3_real, io_ofifo_bits_data_3_imag);
                        |    end
                        |    else begin
                        |         $display( $time, "Dropping invalid output values at ");
                        |    end 
                        |end
                        |
                        |//Clock divider model
                        |clkdiv_n_2_4_8 clockdiv( // @[:@3.2]
                        |  .clock(clock), // @[:@4.4]
                        |  .reset(reset), // @[:@5.4]
                        |  .io_Ndiv(io_Ndiv), // @[:@6.4]
                        |  .io_reset_clk(io_reset_clk), // @[:@6.4]
                        |  .io_clkpn (io_clkpn), // @[:@6.4]
                        |  .io_clkp2n(io_clkp2n), // @[:@6.4]
                        |  .io_clkp4n(io_clkp4n), // @[:@6.4]
                        |  .io_clkp8n(io_clkp8n)// @[:@6.4]
                        |);
                        |
                        |""".stripMargin('|')+dutdef+initialdef+
                        """
                        |    #RESET_TIME
                        |    reset=0;
                        |    io_reset_clk=0;
                        |    #(16*RESET_TIME)
                        |    memaddrcount=0;
                        |    io_reset_adcfifo=0;
                        |    io_reset_index_count=0;
                        |    io_reset_outfifo=0;
                        |    io_reset_adcfifo=0;
                        |    io_reset_infifo=0;
                        |//Tnit the LUT
                        |    
                        |    while (memaddrcount<2**9) begin
                        |       @(posedge clock) 
                        |       io_adc_lut_write_en<=1;
                        |       io_adc_lut_write_addr<=memaddrcount;
                        |       io_adc_lut_write_vals_0_real<=memaddrcount; 
                        |       io_adc_lut_write_vals_1_real<=memaddrcount;
                        |       io_adc_lut_write_vals_2_real<=memaddrcount;
                        |       io_adc_lut_write_vals_3_real<=memaddrcount;
                        |       io_adc_lut_write_vals_0_imag<=memaddrcount; 
                        |       io_adc_lut_write_vals_1_imag<=memaddrcount;
                        |       io_adc_lut_write_vals_2_imag<=memaddrcount;
                        |       io_adc_lut_write_vals_3_imag<=memaddrcount;
                        |       @(posedge clock) 
                        |       memaddrcount=memaddrcount+1;
                        |       io_adc_lut_write_en<=0;
                        |    end
                        |    initdone=1;
                        |    infile = $fopen(g_infile,"r"); // For reading
                        |    while (!$feof(infile)) begin
                        |            @(posedge clock) 
                        |             StatusI=$fscanf(infile, "%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\n",
                        |                             din1, din2, din3, din4,din5, din6, din7, din8);
                        |             io_iptr_A_0_real <= din1;
                        |             io_iptr_A_0_imag <= din2;
                        |             io_iptr_A_1_real <= din3;
                        |             io_iptr_A_1_imag <= din4;
                        |             io_iptr_A_2_real <= din5;
                        |             io_iptr_A_2_imag <= din6;
                        |             io_iptr_A_3_real <= din7;
                        |             io_iptr_A_3_imag <= din8;
                        |    end
                        |    $fclose(infile);
                        |    $fclose(outfile);
                        |    $finish;
                        |end
                        |endmodule""".stripMargin('|')
        //val testbench=Handlebars(textTemplate)
        //tb write testbench(tbvars)
        tb write textTemplate
        tb.close()
  }
}

