#!/usr/bin/env bash
#############################################################################
# This is a Chisel RTL generator configuration script file. 
# The purpose is to control the compilation and testing
# in parametrized manner from this single file
# Created by Marko Kosunen on 24.03.2015
#############################################################################
##Function to display help with -h argument and to control 
##The configuration from the commnad line
help_f()
{
    echo -e "CONFIGURE Release 1.0 (04.04.2016)"
    echo -e "configure-configuration script for Chisel RTL generation"
    echo -e "Written by Marko "Pikkis" Kosunen"
    echo -e -n "\n"
    echo -e "SYNOPSIS"
    echo -e "  configure [OPTIONS] "
    echo -e "DESCRIPTION"
    echo -e "  Producess all configurations and Makefile for the Chisel RTL generation"
    echo -e -n "\n"
    echo -e "OPTIONS"
    echo -e "  -h"
    echo -e "      Show this help."
}

while getopts h opt
do
  case "$opt" in
    h) help_f; exit 0;;
    \?) help_f;;
  esac
done


#$FIRRTL #Sets up THESDKHOME from gloabl setup file
#. ../../TheSDK.config
ROOTPATH=`pwd`
VERILOGPATH=${ROOTPATH}/verilog
SCALAPATH=${ROOTPATH}/src/main/scala
FIRRTL_JAR="$ROOTPATH/rocket-chip/firrtl/utils/bin/firrtl.jar"

VPATHDIRS=`find ${SCALAPATH}/* -type d -exec basename '{}' ';'`
MODULES="memblock"
PACKAGE="memblock"

############################# MAKEFILE   ####################################
CURRENTFILE="${ROOTPATH}/Makefile"
echo "Creating ${CURRENTFILE} for modules:"
for i in ${MODULES}; do
    echo $i
done
cat <<EOF > ${CURRENTFILE}
#Directories
VERILOGPATH= ${VERILOGPATH}
SCALAPATH= ${SCALAPATH}
#DEPDIR :=.depdir
#\$(shell mkdir -p \$(DEPDIR) >/dev/null)
\$(shell mkdir -p \$(VERILOGPATH) >/dev/null)
MODULES= ${MODULES}
PACKAGE=${PACKAGE}

TARGETS = \$(foreach name,\$(MODULES), \$(VERILOGPATH)/\$(name).v)
TEST_TARGETS = \$(foreach name,\$(MODULES), test_\$(name))

#Commands
SBT=sbt -J-Xmx16G -J-Xss8M
TOUCH=touch -r

# Default parameters
memsize ?= 8198
dualport ?= true

MAINPARAMS = -memsize \$(memsize) -dualport \$(dualport)

#Default module for memory mapping
MMOD ?= memblock

`for i in ${VPATHDIRS}; do
    echo vpath %.scala \\$\(SCALAPATH\)/$i
done`
.PHONY: all help doc clean \$(MODULES)


all: \$(TARGETS) 


#Recipes for individual modules
`for i in ${MODULES}; do
    echo -e "$i: \\$(VERILOGPATH)/$i.v"
done`

#Test recipes for in
`for i in ${MODULES}; do
	echo ".PHONY: test_$i"
    echo "test_$i:"
    echo -e "\t\\$(SBT) 'testOnly ${PACKAGE}.${i}Spec'"
done`


#Template for conditional makes
#Figure out the naming conventions later. Package is lowercase, class equals main method
#Does not track dependencies from scala source
\$(VERILOGPATH)/%.v : %.scala  
	\$(eval package:=\$(basename \$(notdir \$@)))
	\$(eval class:=\$(basename \$(notdir \$@)))
	\$(eval testbenchfile:=\$(dir \$<)tb_\$(notdir \$<))
	\$(SBT) 'runMain \$(PACKAGE).\$(class) \$(MAINPARAMS) -td \$(VERILOGPATH)'
	@#Test if testbech generator exists and compile it
	@if [ -f \$(testbenchfile) ]; then \\
		\$(SBT) 'runMain \$(package).tb_\$(class) -td \$(VERILOGPATH)'; \\
	fi
clean:
	rm -f \$(VERILOGPATH)/*.v
	rm -f \$(VERILOGPATH)/*.anno
	rm -f \$(VERILOGPATH)/*.fir
	rm -rf \$(VERILOGPATH)
	#rm -rf \$(DEPDIR)

memmap:
	cp \$(VERILOGPATH)/\$(MMOD).v  \$(VERILOGPATH)/\$(MMOD)_unmapped.orig.v
	\$(SBT) 'runMain \$(PACKAGE).\$(MMOD) \$(MAINPARAMS) -td \$(VERILOGPATH) --infer-rw \$(MMOD) --repl-seq-mem -c:\$(MMOD):-o:\$(VERILOGPATH)/\$(MMOD).conf'

#Generate cleanup recipes for individual modules
`for i in ${MODULES}; do
	echo .PHONY: clean_$i
	echo clean_$i: 
	echo -e "\trm -f \\$(VERILOGPATH)/$i.v"
	echo -e "\trm -f \\$(VERILOGPATH)/$i.anno"
	echo -e "\trm -f \\$(VERILOGPATH)/$i.fir"
    echo -e "\trm -f \\$(VERILOGPATH)/${i}_memmapped.conf"
    echo -e "\trm -f \\$(VERILOGPATH)/${i}_memmapped.v"
done`

help:
	@echo "configured modules are:";
	@for i in \$(MODULES) ; do \\
	   echo \$\$i; \\
	done

doc:
	sbt doc

EOF
##################Hereafter some files you should not need to modify ################################

